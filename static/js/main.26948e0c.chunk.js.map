{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","className","logo","src","width","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,kC,sJCgH5BC,MA5Gf,WACE,OACE,yBAAKC,UAAU,OAEb,uDACCC,IACD,wDACA,2EACsC,6BADtC,6IAEwD,6BAFxD,oFAG4C,6BAH5C,wCAIoB,6BAJpB,gIAK+D,6BAL/D,8GAOsC,6BAPtC,wDASmC,6BATnC,wHAUiE,6BAVjE,mHAYgC,6BAZhC,mEAeS,6BAfT,wFAiBS,6BAjBT,gGAmBS,6BAnBT,iIAqBS,6BArBT,4DAsBmB,6BAtBnB,2DA0BA,sEACA,6BACA,4IACoD,6BADpD,wMAE+E,6BAF/E,+EAGiC,8BAGjC,wDACA,6BACA,6NAAgE,8BAChE,yBAAKC,IAAI,kCAAkCC,MAAM,UACjD,6BACA,yBAAKD,IAAI,kCAAkCC,MAAM,UAEjD,8CACA,6BACA,oJACuD,6BADvD,6JAK2B,8BAE3B,yBAAKD,IAAI,kCAAkCC,MAAM,UACjD,6BACA,yBAAKD,IAAI,kCAAkCC,MAAM,UACjD,6BAEA,+CACA,6BACA,6IAA2D,8BAC3D,yBAAKD,IAAI,kCAAkCC,MAAM,UACjD,6BACA,yBAAKD,IAAI,kCAAkCC,MAAM,UACjD,6BAEA,kDACA,6BACA,wMAIgC,6BAJhC,uFAKwD,8BAExD,yBAAKD,IAAI,kCAAkCC,MAAM,UACjD,6BACA,yBAAKD,IAAI,kCAAkCC,MAAM,UACjD,6BACA,yBAAKD,IAAI,kCAAkCC,MAAM,UACjD,6BAEA,gEACA,6BACA,oHACqD,6BADrD,6CAEc,6BAFd,4DAGmB,6BAHnB,0DAIgC,8BAGhC,yBAAKD,IAAI,kCAAkCC,MAAM,UACjD,6BACA,yBAAKD,IAAI,kCAAkCC,MAAM,UACjD,6BAEA,oEACA,6BACA,uBAAGC,KAAK,+CAAR,8DC9FcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.26948e0c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\n      <h1>react 開GithubPages</h1> \n      {logo}\n      <h2>簡易流程</h2>\n      <p>  \n        安裝 npm,yarn,create-react-app --&#62;<br/>\n        開啟終端機 cd 專案檔案 `create-react-app 專案名(ex:我是新專案)` --&#62;<br/>\n        `npm start` 或 `yarn start` 確認完成無錯誤 --&#62;<br/>\n        github建新專案 --&#62;<br/>\n        再次開啟終端機 cd 我是新專案 `npm gh-pages` 或 `yarn add gh-pages` --&#62;<br/>\n        終端機`git add .` `git commit -m '敘述'` \n        `git remote add origin github專案.git`<br/>\n        `git branch -M main`\n        `git push -u origin main` --&#62;<br/>\n        至github專案settings的Github Pages 改Source後，複製Github Pages網址--&#62;<br/>\n        編輯器開react專案的package.json新增\n        `\"homepage\": \"Github Pages網址\"`<br/>\n        `\"predeploy\":\"yarn build\"`\n        `\"deploy\":\"gh-pages -d build\"`\n        --&#62;<br/>\n        終端機`git add .` `git commit -m '敘述'` `yarn run deploy`\n        --&#62;<br/>\n        再次至github專案settings的Github Pages 改Source 'gh-pages'\n        --&#62;<br/>\n        完成 可以開始code 更新Github Pages依然至終端機`yarn run deploy`\n        --&#62;<br/>\n        git 推送依然可以更新main <br/>\n        用`yarn run deploy`更新gh-pages分支     \n      </p> \n\n      <h3>安裝 npm,yarn,create-react-app</h3>\n      <hr/>  \n      <p>\n        NPM 是 Node Package Manager 的簡稱，可下載各種 Javascript 套件<br/>\n        Yarn 是由 Facebook，Google，Exponent 和 Tilde 構建的新的 JavaScript 包管理器，安裝套件比 npm 來得快些<br/>\n        create-react-app 是建立react開發環境工具<br/>\n      </p>\n\n      <h3>建立專案</h3>\n      <hr/> \n      <p>開啟終端機 cd 專案檔案 `create-react-app 專案名(ex:我是新專案)`，完成後開github建新專案<br/></p> \n      <img src=\"https://i.imgur.com/uIDZNO9.png\" width=\"600px\" />\n      <br/>\n      <img src=\"https://i.imgur.com/vgapEI2.png\" width=\"600px\" />\n\n      <h3>裝gh-pages</h3>\n      <hr/> \n      <p>  \n        再次開啟終端機 cd 我是新專案 `npm gh-pages` 或 `yarn add gh-pages`<br/>\n        終端機`git add .` `git commit -m '敘述'` \n        `git remote add origin github專案.git`\n        `git branch -M main`\n        `git push -u origin main`<br/>\n      </p>\n      <img src=\"https://i.imgur.com/gIjhVlR.png\" width=\"600px\" />\n      <br/>\n      <img src=\"https://i.imgur.com/xpZb0Ew.png\" width=\"600px\" />\n      <br/>\n\n      <h3>改settiings</h3> \n      <hr/> \n      <p>至github專案settings的Github Pages 改Source後，複製Github Pages網址<br/></p>\n      <img src=\"https://i.imgur.com/174WWls.png\" width=\"600px\" />\n      <br/>\n      <img src=\"https://i.imgur.com/87rESZX.png\" width=\"600px\" />\n      <br/>\n\n      <h3>改package.json</h3> \n      <hr/> \n      <p>\n        編輯器開react專案的package.json新增\n        `\"homepage\": \"Github Pages網址\"`\n        `\"predeploy\":\"yarn build\"`\n        `\"deploy\":\"gh-pages -d build\"`<br/>\n        於終端機`git add .` `git commit -m '敘述'` `yarn run deploy`<br/>\n      </p>\n      <img src=\"https://i.imgur.com/5rVh0H1.png\" width=\"600px\" />\n      <br/>\n      <img src=\"https://i.imgur.com/aVyz11T.png\" width=\"600px\" />\n      <br/>\n      <img src=\"https://i.imgur.com/earkrHi.png\" width=\"600px\" />\n      <br/>\n\n      <h3>再次更改settings</h3> \n      <hr/>\n      <p>\n        再次至github專案settings的Github Pages 改Source 'gh-pages'<br/>\n        完成 可以開始code <br/>\n        git 推送依然可以更新main <br/>\n        用`yarn run deploy`更新gh-pages分支<br/>\n      </p> \n\n      <img src=\"https://i.imgur.com/TE0xAQv.png\" width=\"600px\" />\n      <br/>\n      <img src=\"https://i.imgur.com/QCgtZs1.png\" width=\"600px\" />\n      <br/>\n\n      <h3>資料參考來源</h3> \n      <hr/>\n      <a href=\"https://www.youtube.com/watch?v=ctLFWAanxcI\">How to deploy a Create React App Website to GitHub Pages</a> \n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}